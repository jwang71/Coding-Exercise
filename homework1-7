  //remove spaces
   public String removeSpaces(String input) {
    int slow = 0;
    int fast = 0;
    char[] array = input.toCharArray();
    boolean isFirst = true;
    while (fast < array.length) {
      while (fast < array.length && array[fast] == ' ') {
        fast++;
      }
      if (fast == array.length) {
        break;
      }
      if (!isFirst) {
        array[slow++] = ' ';
      }
      
      while (fast < array.length && array[fast] != ' ') {
        array[slow++] = array[fast++];
      }
      isFirst = false;
    }
    return new String(array, 0, slow);
  }
  public String removeSpaces(String input) {
    int slow = 0;
    int fast = 0;
    StringBuilder sb = new StringBuilder();
    
    while (fast < input.length()) {
      while (fast < input.length() && input.charAt(fast) == ' ') {
        fast++;
      } 
      if (fast == input.length()) break;
      int i = fast;
      while (i < input.length() && input.charAt(i) != ' ') {
        i++;
      }
      sb.append(input.substring(fast, i)).append(" ");
      fast = i;
    }

    return sb.toString().trim();
  }


 //strStr
  public int strstr(String large, String small) {
    // write your solution here
    for (int i = 0; i < large.length() - small.length() + 1; i++) {
      int j;
      for (j = 0; j < small.length(); j++) {
        if (large.charAt(i+j) != small.charAt(j)) {
          break;
        }
      }
      if (j == small.length()) {
        return i;
      }
    }
    return -1;
  }

//remove adjacent repeated characters
public String deDup(String input) {
  Stack<Character> stack = new Stack<>();

  int slow = 0;
  int i = 0;
  char[] array = input.toCharArray();
  
  while (i < array.length) {
    if (!stack.isEmpty() && array[i] == stack.peek()) {
      while (i < array.length && array[i] == stack.peek()) {
        i++;
      }
      stack.pop();
    } else {
      stack.push(array[i]);
      i++;
    }
  }
  
  StringBuilder sb = new StringBuilder();
  while (!stack.isEmpty()) {
    sb.append(stack.pop());
  }
  return sb.reverse().toString();
}


//8-2 reverse words in string
  public String reverseWords(String input) {
    String[] array = input.split(" ");
    StringBuilder sb = new StringBuilder();
    for (int i = array.length - 1; i >= 0; i--) {
      if (array[i] != "")
      sb.append(array[i]).append(' ');
    }
    return sb.toString().trim();
  }
  //solution 2
    public String reverseWords(String input) {
    int i = 0;
    char[] array = input.toCharArray();
    
    while (i < array.length) {
      while (i < array.length && array[i] == ' ') {
        i++;
      }
      if (i == array.length) break;
      int j = i;
      while (j < array.length && array[j] != ' ') {
        j++;
      }
      reverse(array, i, j-1);
      i = j;
    }
    reverse(array, 0, array.length - 1);
    return new String(array);
  }
  
  public void reverse(char[] array, int i, int j) {
    while (i <= j) {
      char c = array[i];
      array[i] = array[j];
      array[j] = c;
      i++;
      j--;
    }
  }

  //8-3 replace string 
  public String replace(String input, String s, String t) {
    if (s.length() >= t.length()) {
      return replaceShorter(input, s, t);
    } else {
      return replaceLonger(input, s, t);
    }
  }
  
  public String replaceShorter(String input, String s, String t) {
    int slow = 0;
    int fast = 0;     
    char[] array = input.toCharArray();
    for (; fast < array.length; ) {
      if (fast <= array.length - s.length()) {
        int i = 0;
        for (; i < s.length(); i++) {
          if (array[fast+i] != s.charAt(i)) {
            break;
          } 
        }      
        if (i == s.length()) {
          copyFromLeft(array, slow, t);
          fast += s.length();
          slow += t.length();
        } else {
          array[slow++] = input.charAt(fast++);
        }
      } else {
        array[slow++] = input.charAt(fast++);
      }
    }
    return new String(array, 0, slow);
  }
  
  public String replaceLonger(String input, String s, String t) {
    List<Integer> set = new ArrayList<>();
    for(int i = 0; i <= input.length() - s.length(); ) {
      int j;
      for (j = 0; j < s.length(); j++) {
        if (input.charAt(i+j) != s.charAt(j)) {
          break;
        }
      }
      if (j == s.length()) {
        set.add(i + j - 1);  
        i += s.length();
      } else {
        i++;
      }
    }
    
    int newLength = input.length() + set.size()*(t.length() - s.length());
    char[] array = new char[newLength];
    int index = set.size() - 1;
    int slow = newLength - 1;
    int fast = input.length() - 1;
    
    for (; fast >= 0;) {
      if (index >= 0 && fast == set.get(index)) {
        copyFromRight(array, slow, t);
        slow -= t.length();
        fast -= s.length();
        index--;
      } else {
        array[slow--] = input.charAt(fast--);
      }
    }
    return new String(array);
  }
  
  public void copyFromLeft(char[] array, int index, String t) {
    for (int i = 0; i < t.length(); i++) {
      array[index++] = t.charAt(i);
    }
  }
  
  public void copyFromRight(char[] array, int index, String t) {
    for (int i = t.length() - 1; i >= 0; i--) {
      array[index--] = t.charAt(i); 
    }
  }
